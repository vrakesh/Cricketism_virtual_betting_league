// Generated by CoffeeScript 1.7.1

/*
Author:Rakesh Vasudevan
This javascript script gets real-time information via websockets
The swampdragon model is used to get information from subscribed channels
 */

(function() {
  $(document).ready(function() {
    swampdragon.ready(function() {
      swampdragon.subscribe('board', 'boardinfo', null);
    });
    swampdragon.onChannelMessage(function(channels, message) {
      var tmp;
      $('td[class="boards"]').each(function(index, status) {
        var bit_id, id_val, kern_id, num, status_for_bitfile, status_for_kernel, user_id;
        id_val = $(status).attr('id');
        $(status).html(message.data.board_status[id_val]);
        $(status).parent().collapse("show");
        status_for_bitfile = ["Loading Kernel", "Ready to Use"];
        num = id_val.split('board')[1];
        user_id = '#' + 'user' + num;
        $(user_id).html(message.data.board_status['user' + num]);
        bit_id = '#' + 'bitf' + num;
        if (status_for_bitfile.indexOf($(status).html()) >= 0) {
          $(bit_id).html(message.data.board_status['bitf' + num]);
        } else {
          $(bit_id).html("");
        }
        status_for_kernel = "Ready to Use";
        kern_id = '#' + 'kern' + num;
        if ($(status).html() === status_for_kernel) {
          return $(kern_id).html(message.data.board_status['kern' + num]);
        } else {
          return $(kern_id).html("");
        }
      });
      tmp = {};
      $('td[class="locks"]').each(function(index, lock) {
        var board_id, id_val, num, user_id;
        id_val = $(lock).attr('id');
        num = id_val.split('lock')[1];
        board_id = '#' + 'board' + num;
        if ($(lock).prev().html() !== "") {
          tmp[board_id] = $(lock).prev().prev().html();
        }
        user_id = '#' + 'user' + num;
        if ($(board_id).html() === "Ready to Use") {
          $(lock).html(message.data.board_status[id_val]);
          if ($('.userval').html() === $(user_id).html() || $('.userval').html() === 'Rakesh.Vasudevan@imgtec.com') {
            $(lock).prev().prev().html(tmp[board_id]);
            $(lock).next().removeClass('hidden');
            $(lock).next().next().addClass('hidden');
            return $(lock).next().next().prop('disabled', true);
          } else {
            $(lock).prev().prev().html("");
            $(lock).next().addClass('hidden');
            return $(lock).next().next().addClass('hidden');
          }
        } else {
          $(lock).next().addClass('hidden');
          $(lock).next().next().addClass('hidden');
          return $(lock).html("");
        }
      });
    });
    $('.release').click(function() {
      var data_dict, rc, tr_id;
      tr_id = $(this).parent().parent().attr('id');
      console.log(tr_id);
      console.log(typeof tr_id);
      data_dict = {};
      rc = confirm("Are you sure you want to release the board (Pressing OK will release the board)");
      data_dict['board_free'] = tr_id.split('row')[1];
      data_dict['csrfmiddlewaretoken'] = $('input[name=csrfmiddlewaretoken]').val();
      if (rc === true) {
        $.ajax({
          url: "/bmauto/release/",
          type: 'POST',
          dataType: 'text',
          data: data_dict,
          error: function(jqXHR, textStatus, errorThrown) {
            return alert(textStatus + errorThrown);
          },
          success: function(data, textStatus, jqXHR) {
            console.log('removed' + tr_id);
            location.reload();
          },
          contentType: 'application/x-www-form-urlencoded'
        });
      }
    });
    $('.reboot').click(function() {
      var data_dict, rc, tr_id;
      tr_id = $(this).parent().parent().attr('id');
      console.log(tr_id);
      console.log(typeof tr_id);
      data_dict = {};
      rc = confirm("Are you sure you want to reboot the board (Pressing OK will reboot the board)");
      data_dict['board_reboot'] = tr_id.split('row')[1];
      data_dict['csrfmiddlewaretoken'] = $('input[name=csrfmiddlewaretoken]').val();
      if (rc === true) {
        $.ajax({
          url: "/bmauto/reboot/",
          type: 'POST',
          dataType: 'text',
          data: data_dict,
          error: function(jqXHR, textStatus, errorThrown) {
            return alert(textStatus + errorThrown);
          },
          success: function(data, textStatus, jqXHR) {
            console.log('rebooting' + tr_id);
          },
          contentType: 'application/x-www-form-urlencoded'
        });
      }
    });
  });

}).call(this);
